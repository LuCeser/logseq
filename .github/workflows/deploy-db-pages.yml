name: Deploy DB Version to Cloud

on:
  push:
    branches: ["feat/db"]
  workflow_dispatch:
    inputs:
      build-target:
        description: 'Build Target'
        type: choice
        required: false
        options:
          - beta
          - test
          - non-release
        default: "non-release"

env:
  CLOJURE_VERSION: "1.11.1.1413"
  NODE_VERSION: '20'
  JAVA_VERSION: "11"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Java JDK
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup clojure
        uses: DeLaGuardo/setup-clojure@11.0
        with:
          cli: ${{ env.CLOJURE_VERSION }}

      - name: Fetch yarn deps
        run: yarn install --frozen-lockfile

      - name: Set Build Environment Variables
        run: |
          echo "ENABLE_FILE_SYNC_PRODUCTION=false" >> $GITHUB_ENV
      
      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js "${{ github.event.inputs.build-target }}")
          echo "version=$pkgver" >> $GITHUB_OUTPUT

      - name: Compile CLJS
        run: yarn install && gulp build && yarn cljs:release-electron
        env:
          LOGSEQ_SENTRY_DSN: ${{ secrets.LOGSEQ_SENTRY_DSN }}
          LOGSEQ_POSTHOG_TOKEN: ${{ secrets.LOGSEQ_POSTHOG_TOKEN }}

      - name: Display Package.json
        run: cat ./package.json
        working-directory: ./static
  
      - name: Save VERSION file
        run: echo "${{ steps.ref.outputs.version }}" > ./VERSION
        working-directory: ./static
  
      - name: List Files
        run: ls -al
        working-directory: ./static

      - name: Cache Static File
        uses: actions/upload-artifact@v4
        with:
          name: static
          path: static

  build-macos-arm64:
            needs: [ build ]
            runs-on: macos-14
        
            steps:
              - name: Download The Static Asset
                uses: actions/download-artifact@v3
                with:
                  name: static
                  path: static
        
              - name: Retrieve tag version
                id: ref
                run: |
                  pkgver=$(cat ./static/VERSION)
                  echo "version=$pkgver" >> $GITHUB_OUTPUT
        
              - name: Install Node.js, NPM and Yarn
                uses: actions/setup-node@v3
                with:
                  node-version: ${{ env.NODE_VERSION }}
        
              - name: Get yarn cache directory path
                id: yarn-cache-dir-path
                run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
              - name: Cache yarn cache directory
                uses: actions/cache@v3
                id: yarn-cache
                with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: ${{ runner.os }}-arm64-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                    ${{ runner.os }}-arm64-yarn-
        
              - name: Install Python
                uses: actions/setup-python@v4
                with:
                  python-version: '3.11'
        
              - name: Signing By Apple Developer ID
                if: ${{ github.repository == 'logseq/logseq' }}
                uses: apple-actions/import-codesign-certs@v1
                with:
                  p12-file-base64: ${{ secrets.APPLE_CERTIFICATES_P12 }}
                  p12-password: ${{ secrets.APPLE_CERTIFICATES_P12_PASSWORD }}
        
              # - name: Cache Node Modules
              #   uses: actions/cache@v3
              #   with:
              #     path: |
              #       **/node_modules
              #     key: ${{ runner.os }}-node-modules
        
              - name: Fetch deps and fix dugit arch for arm64
                run: yarn install --ignore-platform && cd node_modules/dugite && npm_config_arch=arm64 node script/download-git.js
                working-directory: ./static
        
              - name: Build/Release Electron App for arm64
                run: yarn electron:make-macos-arm64
                working-directory: ./static
                env:
                  APPLE_ID: ${{ secrets.APPLE_ID_EMAIL }}
                  APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
                  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        
              - name: Save arm64 artifacts
                run: |
                  mkdir -p builds
                  mv static/out/make/Logseq.dmg ./builds/Logseq-darwin-arm64-${{ steps.ref.outputs.version }}.dmg
                  mv static/out/make/zip/darwin/arm64/*.zip ./builds/Logseq-darwin-arm64-${{ steps.ref.outputs.version }}.zip
        
              - name: Upload Artifact
                uses: actions/upload-artifact@v4
                with:
                  name: logseq-darwin-arm64-builds
                  path: builds
